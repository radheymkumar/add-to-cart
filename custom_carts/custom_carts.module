<?php
// https://www.drupal.org/project/commerce/issues/1017462
function custom_carts_menu() {
	$items['product/cart/%'] = array(
		'title' => t('Add To Cart'),
		'page callback' => 'add_to_cart_callback',
		'page arguments' => array(2),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}
function custom_carts_node_view($node, $view_mode, $langcode) {
	if($node->type == 'products') {
		/*$product = field_get_items('node',$node,'field_product');
		commerce_cart_product_add_by_id($product[0]['product_id']);
		drupal_goto('cart');	*/

		$product = field_get_items('node',$node,'field_product')[0]['product_id'];
		
		$node->content['add_to_cart'] = array(
	    '#markup' => l(t('Add to cart'), 'product/cart/'.$product),
	    '#weight' => 10,
	    //'#theme' => 'cart_additional_field',
	  );
	}
}

/*function custom_carts_theme() {
  $theme['cart_additional_field'] = array(
    		'render element' => 'content',
        'template' => 'node--cart',
        'path' => drupal_get_path('module', 'custom_carts') . '/templates',
  	);

  return $theme;
}*/

function add_to_cart_callback($product_id) {
	//echo "<pre>";
	// add to cart by product id
	commerce_cart_product_add_by_id($product_id);
	drupal_goto('cart');

	// add to cart product id  and user id with quantity
	/*global $user;
	$product = commerce_product_load($product_id);
	$line_item = commerce_product_line_item_new($product,1);
	commerce_cart_product_add($user->uid, $line_item);
	drupal_goto('product');*/

	// add to cart checkout
/*	global $user;
	$qty = 1;
	// Create the new order in checkout; you might also check first to
	// see if your user already has an order to use instead of a new one.
	$order = commerce_order_new($user->uid, 'checkout_checkout');
	// Save the order to get its ID.
	commerce_order_save($order);
	// Load whatever product represents the item the customer will be
	// paying for and create a line item for it.
	$product = commerce_product_load($product_id);
	$line_item = commerce_product_line_item_new($product, $qty, $order->order_id);
	// Save the line item to get its ID.
	commerce_line_item_save($line_item);
	// Add the line item to the order using fago's rockin' wrapper.
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);	
	$order_wrapper->commerce_line_items[] = $line_item;
	// Save the order again to update its line item reference field.
	commerce_order_save($order);

	drupal_goto('checkout/' . $order->order_id);*/


}